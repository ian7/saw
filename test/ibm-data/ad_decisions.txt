ServiceCompositionParadigm:::AwbUser:::2008-03-04 16:35:36.290000:::published as alphaWorks sample:::Ead-04:::Project:::Solution outline:::Technology-level refinement:::Lead architect:::Should a Service Composiiton Layer (SCL) be introduced into the solution architecture? On which layer of the SOA solution stack should we aggregate atomic services, should workflow or another composition paradigm be used to aggregate atomic services from Layer 3? Should process orchestration be used to implement cross-service component business process logic?:::This decision is a.k.a. Process Automation Paradigm. There is a rich body of service composition literature both in academia and industry. "Enterprise SOA" by Dirk Krafzig motivates the need for a SCL in "process-enabled SOA". In the naming of the alternatives, we use the 5+4 layer SOA Reference Architecture describes in the following developerWorks article: http://www.ibm.com/developerworks/library/ar-archtemp/:::Available skills, systems management procedures, process semantics, and enterprise architecture guidelines (preferences) drive this decision. The challenge is how to best implement the processes while minimizing the coupling of the service components to enable re-use and flexibility. Loose coupling among service components is a valued architecture principle. This means that in general, the fewer dependencies between services, the better.:::Use workflow pattern if long-running processes with multiple actor interactions, possibly over multiple access channels, have to be coordinated. Also use workflow if engine capabilities such as human tasks, retries, etc. are a plus. Use more conservative approaches else. Is worth noting that SCA is not an option, it is a layer 2 component deployment model, not a composition paradigm (does not have a notion of dynamic control flow).::::::COPYRIGHT-PROTECTED ASSET&nbsp;<br>&copy; IBM Research GmbH, 2007.&nbsp;All rights reserved.:::original SOAD content contributed by Olaf Zimmermann, harvested from projects&nbsp;1999-2005, with contributions&nbsp;from Doug Drake, IBM SOA/WS CoE members:::to be reviewed semi-anually::::::::::::2008-03-04 16:35:36.290000:::1:::N151262567-51103476:::N151262597-1902640931ServiceCompositionLanguage:::AwbUser:::2008-03-04 16:37:30.895000:::published as alphaWorks sample:::Eadt-04:::Process:::Solution outline:::Governance:::Lead architect:::Which language shold be used for orchestrating/choreographing atomic services into aggregated services? Which is the Service Compositon Layer (SCL, Layer 4)? technology? A.k.a. paradigm a.k.a. control/data flow technology a.k.a. abstract process container a.k.a. Business Process Language.:::The discussion accompanying SE Radio episode 85 touches upon the topic: http://www.se-radio.net/podcast/2008-02/episode-85-web-services-olaf-zimmermann "Web Services Platform Architecture" by S. Weerawarana et al provides an in-depth introduction to the relevant standards.:::Importance of standardization and tool support, as well as expressivity of the workflow language and required education are some of the key decision drivers. Here, we assume that the Service Composition Paradigm, decided on the conceptual level, is workflow.:::BPEL is the recommended, state-of-the-art choice for true, long-running workflow scenarios; proprietary languages in software package can be used if such packages are already in use. Java development is a solid fallback. Service composition is a key element of the SOA value proposition; flexibility is a key requirement. The decision scope might be process, subprocess or service - one-size-fits-all desired, but not always possible.::::::COPYRIGHT-PROTECTED ASSET&nbsp;<br>&copy; IBM Research GmbH, 2007.&nbsp;All rights reserved.:::original SOAD content contributed by Olaf Zimmermann, harvested from projects&nbsp;1999-2005. Refined in discussions with Sven Milinski. Contributions from Mark Schultz.:::to be reviewed semi-anually::::::::::::2008-03-04 16:37:30.895000:::1:::N151262597-2145983614:::N151262684771320013BpelEngine:::AwbUser:::2008-03-04 16:38:12.355000:::desclet, published as alphaWorks sample:::Bpela-01:::Project:::Solution outline:::Governance:::Lead architect:::Which product or open source asset should be used as implementation engine for BPEL and workflows in the Service Composition Layer (SCL, Layer 4)? This is an obvious decision, often made on the executive level.:::For information on WebSphere Process Server, refer to http://www.ibm.com/developerworks/websphere/zones/businessintegration:::All usual software evaluation and selection criteria. For all asset selection decisions, certain generic decision drivers can be identified, serving as Product Technology Selection Rational, e.g. number of current customers, how long on the market, is it standards based, will vendor supply a reference customer?:::All standard software evaluation and selection policies and practices in your company. E.g., some companies do not allow you to use any open source software, due to legal and support issues.::::::COPYRIGHT-PROTECTED ASSET&nbsp;<br>&copy; IBM Research GmbH, 2007.&nbsp;All rights reserved.:::original SOAD content contributed by Olaf Zimmermann, harvested from projects&nbsp;1999-2005, joint work with Jonas Grundler. Contributions from Mark Schultz.:::flesh out AAs::::::::::::2008-03-04 16:38:12.355000:::1:::N151262684771320106:::N151262684771320047InvocationTransactionalityPattern:::AwbUser:::2008-03-04 16:35:37.051000:::published as alphaWorks sample:::Msg-05:::Operation:::Macro design:::Technology-level refinement:::Service modeler:::What is the system transactionallity of a service (operation) invocation? Transaction management, e.g. ensuring ACID characteristics, is a system-level response to resource integrity requirements. In a business process execution environment, all service invocations have to decide for certain transaction management settings, e.g., in BPEL and SCA. Some of these settings are vendor-specific (proprietary). This is one of the most challenging ADs when designing a process-centric SOA with a Service Composition Layer (SCL); it also has to be made when no such layer exists.:::If you need a quick reminder what transaction management is about, take a look at the following article: http://www.ibm.com/developerworks/java/library/os-ag-transsup/index.html. If you need a thorough introduction to the topic at hand in a workflow/BPM context, we recommend Chapter 7 of "Production Workflow" by F. Leymann and D. Roller.:::Business-level resource protection needs, capabilities of the available service interfaces (local or remote, protocols, transaction context sharing) as well as standard NFRs such as parallelism (number and size of transactions), manageability, and testability.:::Use Transaction Islands for synchronous channels, Stratified Stilts for asynchronous ones. Take resource protection needs and legacy systems and protocol contraints into account.::::::COPYRIGHT-PROTECTED ASSET&nbsp;<br>&copy; IBM Research GmbH, 2007.&nbsp;All rights reserved.:::original SOAD content contributed by Olaf Zimmermann, harvested from projects&nbsp;1999-2005. Joint work with Jonas Grundler.:::to be reviewed semi-annually, to be reviewed by more BPEL/WPC SMEs, provide tutorial::::::::::::2008-03-04 16:35:37.051000:::1:::N1512625671484608885:::N151262597-2145981360ProcessActivityTransactionalityPAT:::AwbUser:::2008-03-04 16:37:27.220000:::published as alphaWorks sample:::Prd-04:::Operation:::Macro design:::Platform mapping:::Process modeler:::How can the cross-layer Invocation Transactionality Pattern be refined on layer 4? <br> Process Activity Transactionality (PAT) defines two primitives for the SCL, transaction context sharing or Join (J), and transaction context separation or New (N).:::The PAT primitive does not have a direct BPEL realization; typically, BPEL engine vendors add proprietary support for it. For example, have a look at the developerWorks articles by A. Robeller, e.g. "Using compensation in business processes with Business Process Choreographer" and "Microflow Compensation in Business Process Choreographer". Furthermore, additional standardization work is underway; for example, the BPEL for Java (BPEL4J) specification introduces ACID scopes. See related decisions.:::The exact semantics of PAT are workflow engine-specific. For example, during a rollback an engine may let the entire process fail, request resolution by a human operator, or retry one or more activities at a later point in time (potentially with a different transactional scope). While this is engine-specific behavior outside of the scope e.g. of the BPEL specification, the process modeler must be aware of it when selecting between PAT-J and PAT-N.:::PAT-J is commonly used in practice. However, there are reasons to use the PAT-N variation, especially in the Transaction Bridge and Transaction Islands patterns. For example, there might be a business justification for running two process activities independent from each other from a system transactional point of view. Some process models contain loops that are too complex to fit into a single, short-lived system transaction (e.g., retries, refinement/completion cycles). Service provider limitations might also exist.::::::COPYRIGHT-PROTECTED ASSET&nbsp;<br>&copy; IBM Research GmbH, 2007.&nbsp;All rights reserved.:::original SOAD content contributed by Olaf Zimmermann, harvested from projects&nbsp;1999-2005. Joint work with Jonas Grundler.:::to be reviewed semi-annually, to be reviewed by more BPEL/WPC SMEs.::::::::::::2008-03-04 16:37:27.220000:::1:::N151262597-2145981284:::N151262597-2145983617CommunicationsTransactionalityCT:::AwbUser:::2008-03-04 16:37:29.834000:::published as alphaWorks sample:::Ird-04:::Channel:::Macro design:::Technology-level refinement:::Integration architect:::How can the Invocation Transactionality Pattern decision be refined for the integration layer? <br> Data management is a key concern during enterprise application development; ACID transactions a classical solution to the problems at hand. The transactional behaviour therefore is a key nonfunctional characteristic of any service invocation. This primitive captures the Integration Layer 6 perspective of this composite design concern as an atomic conceptual decision.:::The paper "Architectural decisions and patterns for transactional business process in SOA has detailed explanations.:::See related Invocation Transactionality Pattern decision for decision driver information.:::Select a composite pattern under decision Msg-05, Invoke Transactionality Pattern, and then derive the CT primitive defined for the selected pattern.::::::COPYRIGHT-PROTECTED ASSET&nbsp;<br>&copy; IBM Research GmbH, 2007.&nbsp;All rights reserved.:::original SOAD content contributed by Olaf Zimmermann, harvested from projects&nbsp;1999-2005. Joint work with Jonas Grundler.:::to be reviewed semi-annually, to be reviewed by more BPEL/WPC SMEs.::::::::::::2008-03-04 16:37:29.834000:::1:::N151262597-2145983575:::N151262684771319929ServiceProviderTransactionalityST:::AwbUser:::2008-03-04 16:35:30.973000:::published as alphaWorks sample:::Crd-05:::Operation:::Macro design:::Platform mapping:::Application architect:::How can the composite decision Msg-05, Invocation Transactionality Pattern, be refined for Layer 2? See this decision for a detailed problem statement. A.k.a. service (component) implementation qualifier.:::The paper "Architectural decisions and patterns for transactional business process in SOA" has detailed explanations for this decision, which is tightly coupled with the composite Invocation Transactionality Pattern decision (Msg-05) and its layer 2 and 4 refinements (Ird-04 CT, Prd-04 PAT).:::Coordination vs. coupling tradeoff:::Implement the service to be able to support ST-J to be flexible and future proof, but configure and deploy services as ST-N by default. If the service modifies enterprise resources (e.g. database tables), it should be designed as a transactional service. For idempotent (e.g., certain read-only operations) both options can be chosen. The selection must be inline with its related decisions, defining the transactional settings for layers 3 (CT) and 4 (PAT), as well as the selection of a composite pattern (Msg-05, Invocation Transactionality Pattern).::::::COPYRIGHT-PROTECTED ASSET&nbsp;<br>&copy; IBM Research GmbH, 2007.&nbsp;All rights reserved.:::original SOAD content contributed by Olaf Zimmermann, harvested from projects&nbsp;1999-2005. Joint work with Jonas Grundler.:::to be reviewed semi-annually, to be reviewed by more BPEL/WPC SMEs.::::::::::::2008-03-04 16:35:30.973000:::1:::N151262567-1760776756:::N151262684771320007WpsProcessActivityTransactionality:::AwbUser:::2008-03-04 16:38:13.086000:::desclet, published as alphaWorks sample:::Bpela-02:::Operation:::Micro design:::Tooling:::Process platform specialist:::How should the invoke activity-level transaction attribute in the BPEL editor in WID be configured? WebSphere Process Server provides a BPEL engine, which exposes processes and services as SCA components; in WPS, a BPEL-based SCL connects to the underlying architectural layers via SCA. In WebSphere Process Server, PAT translates into a proprietary invoke activity configuration attribute called transactionalBehavior which can be set to requiresOwn (PAT-N) and participates (PAT-J). Two additional vendor-specific values exist, which we did not model as primitives, commitBefore and commitAfter.:::In WebSphere Integration Developer, this setting can be found in the Server tab of the Process Editor used to configure the properties invoke activities. It is called Transactional Behaviour: http://publib.boulder.ibm.com/infocenter/dmndhelp/v6rxmx/index.jsp (search for Process editor server page reference):::Transaction size and number vs. resource protection needs.:::This is the platform-specific mapping of higher-level AD/pattern primiitive (see Relationships). Consult the PAT decision for advice. Note that the WebSphere Integration Developer default is not in line with our patterns and best practices!::::::COPYRIGHT-PROTECTED ASSET&nbsp;<br>&copy; IBM Research GmbH, 2007.&nbsp;All rights reserved.:::original SOAD content contributed by Olaf Zimmermann, harvested from projects&nbsp;1999-2005. Joint work with Jonas Grundler.:::to be reviewed semi-annually, to be reviewed by more BPEL/WPC SMEs,&nbsp;flesh out AAs::::::::::::2008-03-04 16:38:13.086000:::1:::N151262684771320109:::N151262684771320047WebServicesTransactionality:::AwbUser:::2008-03-04 16:38:19.835000:::desclet, published as alphaWorks sample:::Ws-06:::Operation:::Micro design:::Tooling:::Integration architect:::Should Web Services Atomic Transaction (WSAT) and Web Services Business Activity Framework (WBAF) be used to implement system and business transactionality for a Web service operation?:::The discussion accompanying SE Radio episode 85 touches upon the topic: http://www.se-radio.net/podcast/2008-02/episode-85-web-services-olaf-zimmermann "Web Services Platform Architecture" by S. Weerawarana et al provides an in depth introduction to the relevant standards.:::Standards and implementation maturity and interoperability, resource protection needs:::Most Web services production references keep the system transaction boundary within the service implementation, so no WSAT. As far as we can tell, few products and projects have mature support for WBAF as of today.::::::COPYRIGHT-PROTECTED ASSET&nbsp;<br>&copy; IBM Research GmbH, 2007.&nbsp;All rights reserved.:::original SOAD content contributed by Olaf Zimmermann, harvested from projects&nbsp;1999-2005. Joint work with Jonas Grundler.:::&nbsp;flesh out AAs::::::::::::2008-03-04 16:38:19.835000:::1:::N151262684771320143:::N151262597-1902640986ReferenceQualifiers:::AwbUser:::2008-03-04 16:37:50.673000:::desclet, published as alphaWorks sample:::Sca-03:::Operation:::Micro design:::Platform mapping:::Process platform specialist:::How should the SCA qualifiers in the SCA assembly editor be configured so that they enforce the selected conceptual transaction management pattern and primitive settings?:::The ICSOC 2007 paper "Architectural decisions and patterns for transactional business process in SOA" has detailed explanations. Note that for the time being, these settings are defined by the SCA implementation, as opposed to the emerging SCA standards. For WebSphere Process Server, see http://publib.boulder.ibm.com/infocenter/dmndhelp/v6rxmx/index.jsp (look for topic "Quality of service: Qualifiers for mediation services").:::Coordination vs. coupling tradeoff:::Use the alternative that matches with the conceptual pattern you have selected for Invocation Transactionality Pattern, Transaction Islands, Transaction Bridge, Stratified Stilts.::::::COPYRIGHT-PROTECTED ASSET&nbsp;<br>&copy; IBM Research GmbH, 2007.&nbsp;All rights reserved.:::original SOAD content contributed by Olaf Zimmermann, harvested from projects&nbsp;1999-2005. Joint work with Jonas Grundler:::to be reviewed semi-annually,&nbsp;to be reviewed by more BPEL/WPC SMEs.::::::::::::2008-03-04 16:37:50.673000:::1:::N151262684771319918:::N151262597-1531436055ImportQualifiers:::AwbUser:::2008-03-04 16:38:27.396000:::desclet, published as alphaWorks sample:::Sca-04:::Operation:::Micro design:::Tooling:::Process platform specialist:::How should the SCA qualifiers in the SCA assembly editor be configured so that they enforce the selected conceptual transaction management pattern and primitive settings?:::The ICSOC 2007 paper "Architectural decisions and patterns for transactional business process in SOA" has detailed explanations. Note that for the time being, these settings are defined by the SCA implementation, as opposed to the emerging SCA standards. For WebSphere Process Server, see http://publib.boulder.ibm.com/infocenter/dmndhelp/v6rxmx/index.jsp (look for topic "Quality of service: Qualifiers for mediation services").:::Coordination vs. coupling tradeoff:::Use the alternative that matches with the conceptual pattern you have selected for Invocation Transactionality Pattern, Transaction Islands, Transaction Bridge, Stratified Stilts.::::::COPYRIGHT-PROTECTED ASSET&nbsp;<br>&copy; IBM Research GmbH, 2007.&nbsp;All rights reserved.:::original SOAD content contributed by Olaf Zimmermann, harvested from projects&nbsp;1999-2005. Joint work with Jonas Grundler:::to be reviewed semi-annually,&nbsp;to be reviewed by more BPEL/WPC SMEs.::::::::::::2008-03-04 16:38:27.396000:::1:::N151262684850893769:::N151262597-1531436055InterfaceQualifiers:::AwbUser:::2008-03-04 16:37:49.972000:::desclet, published as alphaWorks sample:::Sca-05:::Operation:::Micro design:::Platform mapping:::Process platform specialist:::How should the SCA qualifiers in the SCA assembly editor be configured so that they enforce the selected conceptual transaction management pattern and primitive settings?:::The ICSOC 2007 paper "Architectural decisions and patterns for transactional business process in SOA" has detailed explanations. Note that for the time being, these settings are defined by the SCA implementation, as opposed to the emerging SCA standards. For WebSphere Process Server, see http://publib.boulder.ibm.com/infocenter/dmndhelp/v6rxmx/index.jsp (look for topic "Quality of service: Qualifiers for mediation services").:::Coordination vs. coupling tradeoff:::Use the alternative that matches with the conceptual pattern you have selected for Invocation Transactionality Pattern, Transaction Islands, Transaction Bridge, Stratified Stilts.::::::COPYRIGHT-PROTECTED ASSET&nbsp;<br>&copy; IBM Research GmbH, 2007.&nbsp;All rights reserved.:::original SOAD content contributed by Olaf Zimmermann, harvested from projects&nbsp;1999-2005. Joint work with Jonas Grundler:::to be reviewed semi-annually,&nbsp;to be reviewed by more BPEL/WPC SMEs.::::::::::::2008-03-04 16:37:49.972000:::1:::N151262684771319915:::N151262597-1531436055ImplementationQualifiers:::AwbUser:::2008-03-04 16:38:28.097000:::desclet, published as alphaWorks sample:::Sca-06:::Operation:::Micro design:::Platform mapping:::Process platform specialist:::How should the SCA qualifiers in the SCA assembly editor be configured so that they enforce the selected conceptual transaction management pattern?:::The ICSOC 2007 paper "Architectural decisions and patterns for transactional business process in SOA" has detailed explanations. Note that for the time being, these settings are defined by the SCA implementation, as opposed to the emerging SCA standards: For WebSphere Process Server, see http://publib.boulder.ibm.com/infocenter/dmndhelp/v6rxmx/index.jsp (look for topic "Quality of service: Qualifiers for mediation services").:::Coupling vs. coordination effort tradeoff:::Use the alternative that matches with the conceptual pattern you have selected for Invocation Transactionality Pattern: Transaction Islands, Transaction Bridge, or Stratified Stilts.::::::COPYRIGHT-PROTECTED ASSET&nbsp;<br>&copy; IBM Research GmbH, 2007.&nbsp;All rights reserved.:::original SOAD content contributed by Olaf Zimmermann, harvested from projects&nbsp;1999-2005. Joint work with Jonas Grundler:::to be reviewed semi-annually,&nbsp;to be reviewed by more BPEL/WPC SMEs.::::::::::::2008-03-04 16:38:28.097000:::1:::N151262684850893772:::N151262597-1531436055EjbTransactionAttribute:::AwbUser:::2008-03-04 16:38:14.007000:::desclet, published as alphaWorks sample:::Java-04:::Method:::Micro design:::Deployment:::Application architect:::How should the EJB transaction attribute in the deployment descriptor managed by the EJB container be set so that it enforced the selected high level Transaction management pattern?:::All J2EE books with EJB coverage explain these settings, e.g., the one by R. Monson-Haefel. For a quick overview, look here: http://jdj.sys-con.com/read/36596.htm:::Coordination vs. coupling tradeoff:::Use the alternative that matches with the conceptual pattern you have selected for Operation Transactionality, Transaction Islands, Transaction Bridge, Transaction Stilts.::::::COPYRIGHT-PROTECTED ASSET&nbsp;<br>&copy; IBM Research GmbH, 2007.&nbsp;All rights reserved.:::original SOAD content contributed by Olaf Zimmermann, harvested from projects&nbsp;1999-2005.&nbsp;Joint work with Jonas Grundler:::to be reviewed semi-annually::::::::::::2008-03-04 16:38:14.007000:::1:::N151262684771320112:::N151262597-2145981157ResourceProtectionStrategy:::AwbUser:::2008-03-04 16:35:40.747000:::published as alphaWorks sample:::Prd-02:::Process:::Macro design:::Technology-level refinement:::Lead architect:::How do we protect resources such as invoked services (message queues, and databases) against ACID violations (lost updates, phantom reads) during concurrent, parallel process execution? How do we set process state and other resources back when handling business-level and technical errors during process execution, for example when a network timeout occurs?:::For an overview, read what M. Fowler has to say about this challenging topic in Chapter 5 of "Patterns of Enterprise Application Architecure". He views this design space as a river full of sharks, piranhas, and other, less friendly animals. See transaction processing literature such as Chapter 7 in "Production Workflow" by F. Leymann and D. roller for an in-depth introduction to all related issues.:::In principle, there could be one system transaction (transaction manager enforcing ACID characteristics) or multiple system transactions per process. Business-level protection needs (shared enterprise resources, ACID requirements, concurrent requests), existing system reality (system transaction boundaries, idempotency, operations that can not be undone), current trouble shooting practices, and all NFRs (performance requiring parallelism, testability, manageability) will drive the decision making, often reqiuiring a combination of solutions (captured as separate decisions).:::Make each atomic service transactional. Avoid keeping transaction open during client interaction. Do not let unit of work cross layer boundaries. Use middleware support such as BPEL compensation for business-level undos at least for long runnig flows. Design error cases explicitly, do not forget errors during error recovery. It is very typical that both system and business transactions are used, both in process-centric SOAs and in other transactional enterprise applications, e.g., an "isLive" flag in a custom database that is toggled by the last system transaction is a pattern we have seen many clients use. The devil is in the detail - protocol vs. wiring, impact of loose coupling, etc., so perform a diligent analyis and design session for each and every project. For example, a Question, Option, Criteria (QOC) diagram that can assist during this work.::::::COPYRIGHT-PROTECTED ASSET&nbsp;<br>&copy; IBM Research GmbH, 2007.&nbsp;All rights reserved.:::original SOAD content contributed by Olaf Zimmermann, harvested from projects&nbsp;1999-2005:::to be reviewed semi-anually, had this one fleshed out already - copied over::::::::::::2008-03-04 16:35:40.747000:::1:::N151262567839123127:::N151262597-2145983617TransactionCoordinator:::AwbUser:::2008-03-04 16:38:09.661000:::desclet (initial draft), published as alphaWorks sample:::Prd-03:::Process:::Macro design:::Technology-level refinement:::Lead architect:::Is the workflow engine the top-level transaction manager or just one of many resource managers?:::See Chapter 7 of "Production Workflow" by F. Leymann and D. Roller.:::Resource protection needs, operational model (e.g., network and server topology), capabilities of involved adapters and resource managers.:::Keep things simple, so make the Service Composition Layer (SCL) a.k.a. process layer the transaction manager if present and if possible without tightly coupling remote communication partners (e.g. via a distributed 2PC system transaction).::::::COPYRIGHT-PROTECTED ASSET&nbsp;<br>&copy; IBM Research GmbH, 2007.&nbsp;All rights reserved.:::original SOAD content contributed by Olaf Zimmermann, harvested from projects&nbsp;1999-2005:::to be reviewed semi-anually, flesh out AAs::::::::::::2008-03-04 16:38:09.661000:::1:::N151262684771320097:::N151262597-2145983617CompensationMechanism:::AwbUser:::2008-03-04 16:38:10.472000:::published as alphaWorks sample:::Prd-06:::Process:::Macro design:::Technology-level refinement:::Application architect:::What mechanism will be used to compensate for failing components? As services are loosely coupled together to form application systems, there is a need to compensate if one of the services (infrastructure or application) does not complete its task as expected. In that event, compensation technology will be required.:::Powerful concept, different manifestations in various technologies and tools. "Production Workflow" by F. Leymann and D. Roller motivates the need for compensation and presents solutions in a business process/workflow engine context. Several developerWorks articles by A. Robeller, e.g. "Using compensation in business processes with Business Process Choreographer" and "Microflow Compensation in Business Process Choreographer" take a more product- and technology centric view.:::Correctness, resource protection meeds, and observability of system under construction are some of many decision drivers. Our discussion assumes that compensation can be implemented (i.e. applications are written so that transactions can be rolled back).:::Avoid introducing many different compensation and error handling concepts, even if typically a combination of approaches in required. No simple recommendation can be given here, the required design work requires process, service, component impact failure analysis.::::::COPYRIGHT-PROTECTED ASSET&nbsp;<br>&copy; IBM Research GmbH, 2007.&nbsp;All rights reserved.:::original SOAD content contributed by Olaf Zimmermann, harvested from projects&nbsp;1999-2005. Contributions from IBM&nbsp;SOA/WS CoE members.:::to be reviewed semi-anually, flesh out AAs::::::::::::2008-03-04 16:38:10.472000:::1:::N151262684771320100:::N151262597-2145983617CompensationTechnology:::AwbUser:::2008-03-04 16:38:11.363000:::desclet, published as alphaWorks sample:::Bpel-03:::Service:::Macro design:::Programming:::Process modeler:::Should engine support or custom code be used to implement business transactions (compensating logic)? Once compensation operations have been defined, when and how are they invoked?:::Writing compensation code is hard - see "Production Workflow" by F. Leymann and D. Roller for a thorough discussion of challenges and solution building blocks.:::Resource protection needs, vendor independence requirements. Here, we assume that the service composition language has been decided to be BPEL.:::Stick to BPEL compensation if possible. Use vendor extensions as necessary.::::::COPYRIGHT-PROTECTED ASSET&nbsp;<br>&copy; IBM Research GmbH, 2007.&nbsp;All rights reserved.:::original SOAD content contributed by Olaf Zimmermann, harvested from projects&nbsp;1999-2005:::&nbsp;flesh out AAs::::::::::::2008-03-04 16:38:11.363000:::1:::N151262684771320103:::N151262597-2130276959MessageExchangePattern:::AwbUser:::2008-03-04 16:37:20.770000:::published as alphaWorks sample:::Msg-01:::Operation:::Macro design:::Technology-level refinement:::Integration architect:::How does the service consumer interact with the service operation on the provider side? <br> Several message exchange patterns can be employed for communicating messages among the service receiver(s) and service provider(s). The appropriate ones must be chosen depending on the circumstances.:::W3C discusses message exchange patterns here: http://www.w3.org/2002/ws/cg/2/07/meps.html Gregor Hohpe's website is a must-read: http://www.eaipatterns.org (look for his "coffee shop" paper, as well as draft versions of "Conversation Patterns").:::Invocation and consumer semantics, network, reliability of provider. Here, we assume that the the Integration Style is RPC or messaging, the integration style is service interactions via document exchange (SOA).:::There are only two real alternatives in practice, synchronous and asynchronous - all other options are of theoretical, proprietary, or homegrown nature, e.g. the notification and solicit-response options mentioned in WSDL 1.1, where the provider opens the connection. Request-reply is best supported by today's Web services engines. One way can be an option, only of interest if transport layer is asynchronous/messaging based (dependency!). Synchronous communication is simpler to implement than asychnronous (think of housekeeping!), but has some drawbacks (less fault tolerant). The support of higher-level integration and conversation patterns can dictate the products to be used for that purpose (ESBs, process engines).::::::COPYRIGHT-PROTECTED ASSET&nbsp;<br>&copy; IBM Research GmbH, 2007.&nbsp;All rights reserved.:::original SOAD content contributed by Olaf Zimmermann, harvested from projects&nbsp;1999-2005, with contributions from IBM SOA/WS CoE members.:::to be reviewed semi-anually,&nbsp;is this an extra Msg-0x, addressed on PIM/PSM level, [1] Synchronous, [2] Asynchronous::::::::::::2008-03-04 16:37:20.770000:::1:::N151262597-2145981139:::N151262597-2145981360MessageExchangeFormat:::AwbUser:::2008-03-04 16:37:06.430000:::published as alphaWorks sample:::Msg-02:::Operation:::Macro design:::Technology-level refinement:::Integration architect:::How are payload and control information encoded/serialized on the communication channel? In distributed computing, many serialization/deserialization options exist for payload and control information. On a conceptual level, we can distinguish between textual and binary formats; on a technology level, SOAP is an example of a standardized XML text format (see related technology-level decision).:::See Web services literature e.g. "Perspectives on Web Services" by Olaf Zimmermann, M. Tomlinson, and S. Peuser for rationale behind this decision.:::Questions during the decision making include: Is a standards-based and tool-supported approach preferable? Is the design-by-contract principle considered important? Here, we assume that SOA is a primary architectural style for the solution that is under contruction, which means that remote operations are invoked via messages.:::We recommend using the standard text format defined by the Web services technology stack (SOAP) due to our positive project experience; several other opinions exist.::::::COPYRIGHT-PROTECTED ASSET&nbsp;<br>&copy; IBM Research GmbH, 2007.&nbsp;All rights reserved.:::original SOAD content contributed by Olaf Zimmermann, harvested from projects&nbsp;1999-2005:::to be reviewed semi-anually::::::::::::2008-03-04 16:37:06.430000:::1:::N151262597-1902640887:::N151262597-2145981360MessagePayloadFormat:::AwbUser:::2008-03-04 16:38:26.685000:::published as alphaWorks sample:::Ws-01:::Operation:::Micro design:::Tooling:::Integration architect:::Which message exchange format should be used to structure service invocation request and resonse payload? Payload siuch as in and out parameters and service operation name must be encoded/decoded before and after transport, so that consumer and provider implementations can process it.:::See several articles on IBM developerWorks for short overviews, and books such as "Web services Platform Architecture" by S. Weerawarana et al and "Perspectives on Web services" by Olaf Zimmermann et al for deeper coverage.:::Note that SOAP 1.2 differssubstantialy from SOAP 1.1. Most commercial Web services engines still implement SOAP 1.1. Here, we assume that Web services have been chosen as RPC Integration Technology.:::SOAP 1.1. widely supported by open source assets and products. SOAP 1.2 does not have any traction yet.::::::COPYRIGHT-PROTECTED ASSET&nbsp;<br>&copy; IBM Research GmbH, 2007.&nbsp;All rights reserved.:::original SOAD content contributed by Olaf Zimmermann, harvested from projects&nbsp;1999-2005, with contributions from Cesare Pautasso and IBM SOA/WS CoP.:::to be reviewed semi-annually, more detailed discussion needed here::::::::::::2008-03-04 16:38:26.685000:::1:::N151262684850893740:::N151262597-1902640986TransportBinding:::AwbUser:::2008-03-04 16:37:26.649000:::published as alphaWorks sample:::Ws-02:::Operation:::Macro design:::Tooling:::Integration architect:::Once a message exchange format has been decided upon, we also have to decide for a transport protocol underneath the SOAP messaging "layer" in the WS-* "stack". This is a technology-specific refinement of the conceptual decision selecting a message exchange pattern. It is also known as Invocation Protocol.:::See several articles on IBM developerWorks for short overviews, and books such as "Web services Platform Architecture" by S. Weerawarana et al and "Perspectives on Web services" by Olaf Zimmermann et al for deeper coverage.:::Response times, reliability requirements, coupling considerations, systems management needs. Not all transport bindings are supported by all RPC and messaging technologies and assets.:::Unlike some SOA evangelists, we believe that SOAP/HTTP is a perfectly valid choice unless NFRs mandate usage of asynchronous communication and messaging technology. For sure it is a low-cost starting point for many engagements. At present, SOAP/HTTP still is the only fully standardized WSDL binding. Achieving JMS and .NET interoperability is possible, but requires tweaking/custom coding.::::::COPYRIGHT-PROTECTED ASSET&nbsp;<br>&copy; IBM Research GmbH, 2007.&nbsp;All rights reserved.:::original SOAD content contributed by Olaf Zimmermann, harvested from projects&nbsp;1999-2005, with contributions from IBM SOA/WS CoE members:::to be reviewed semi-anually, more detailed discussion needed here::::::::::::2008-03-04 16:37:26.649000:::1:::N151262597-2145981281:::N151262597-1902640986SoapEngine:::AwbUser:::2008-03-04 16:37:24.726000:::published as alphaWorks sample:::Java-02:::Service:::Micro design:::Deployment:::Integration architect:::A library implementing SOAP/HTTP or other Web services endpoint (consumer and provider side) is required. We assume Java usage here. Many different alternatives exist on other platforms.:::The Codehaus Xfire website provides a WS-*standards vs. SOAP engine comparison.:::Vendor support, interoperability characteristics, performance reports, customization options (e.g. handlers), API and other standards support (e.g. JSR 109, JAX-RPC, WSAT), supported transports (e.g. SOAP/JMS), envelope compression, security features:::Axis2 and Axis 1.x are popular choices if using open source technology is possible (using open source assets might be a legal and a support issue). For WebSphere users, the IBM SOAP implementation that ships with WebSphere is recommended. Custom development leads to maintenance efforts. Some open source assets have impressive performance reports, but detailed evaluations often show that it is hard to configure the asset, e.g. due to poor documentation.::::::COPYRIGHT-PROTECTED ASSET&nbsp;<br>&copy; IBM Research GmbH, 2007.&nbsp;All rights reserved.:::original SOAD content contributed by Olaf Zimmermann, harvested from projects&nbsp;1999-2005:::to be reviewed semi-anually, capture more AA details::::::::::::2008-03-04 16:37:24.726000:::1:::N151262597-2145981206:::N151262597-2145981157