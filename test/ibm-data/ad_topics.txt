Layer4ProcessRealizationDecisions:::Prd:::This topic group collects the platform-independent process design decisions, to be taken for each business process to be implemented. Several of these decisions are classical enterprise application architecture/development ones, many of them list classical architectural patterns such as workflow as alternatives. Naturally, there are many dependencies to corresponding technology platform-specific decisions, which reside on the lower Technology and Vendor Asset Levels.:::If you are missing the term BPEL in the decision content on this level, this is a intentional: the technology refinement takes place on subsequent level, see dependency relationships. All service composition and orchestration patterns could appear as alternatives of decisions in this topic. At the time of writing, a definite source of such patterns was not available yet; the ones defined by C. Hendrich and U. Zdun are recommended; T. Erl defines such patterns at http://soapatterns.org.:::N151262597-2145983617:::N151262684664208150::::::2008-03-04 16:37:31.035000:::1
Layer6IntegrationRealizationDecisions:::Ird:::The Layer 6 (integration layer) topics in SOAD deals with Enterprise Service Bus (ESB) design issues, starting with abstract architectural patterns such as Broker, then drilling down to Web services and other technologies and finally to implementation assets. This is the conceptual patterns view on Layer 6; both the Technology and the Vendor Asset Level have many decisions refining the ones on this topic.:::In principle, all "Enterprise Integration Patterns (EIP) from G. Hohpe / B. Woolf could be featured in this topic and its subtopics. By definition, patterns have to be selected and adopted; these steps can be expressed as architectural decisions. We discuss the relationship between patterns and decisions in a WICSA 2008 paper entitles "Combining architecdtural patterns and decisions into a comprehensive and comprehensible design method".:::N151262684771319929:::N151262684664208150::::::2008-03-04 16:37:51.535000:::1
Layer2ComponentRealizationDecisions:::Crd:::This layer deals with Component-Based Development (CBD) on an abstract level. For the time being, there are a few generic decisions only.:::In a full version of SOAD, the patterns in M. Fowler's "Patterns of Enterprise Application Architecture" and E. Evans "Domain Driven Design" could appear in this layer.:::N151262684771320007:::N151262684664208150::::::2008-03-04 16:37:54.359000:::1
Layer3WebServiceBindingDecisions:::Ws:::This decision topic is roughly equivalent to the binding part of a WSDL contract (as opposed to conceptual service realization decisions, which correspond to the WSDL port type/interface, and asset-level service deployment issues, which map to the WSDL service/port element).:::It is quite interesting to see that the three levels of refinement/abstraction appear in many design methods and related assets. For example, WSDL knows part type/interface, binding, and service/port; Martin Fowler discusses three iterations for UML diagrams in "UML Distilled"; operational models in the IBM Unified Method Framework have a conceptual, a specified, and a physical level . Going through two refinement steps seems to be a natural way of separating concerns and designing systems iteratively and incrementally.:::N151262597-1902640986:::N151262684664208745::::::2008-03-04 16:37:11.197000:::1
Layer2ScaDesignDecisions:::Sca:::This topic captures architectural decisions that are required if the Service Component Architecture (SCA) is used as a component and deployment model for services and service consumers.:::For the time being, we only discuss a few Quality of Service (QoS) related decisions here, those that deal with transaction management; more decisions can be identified. The SCA specifications are still evolving (watch OSOA alliance and OASIS activities); so some of the settings captured here are part of vendor-specific extensions of the already existing public specifications.:::N151262597-1531436055:::N151262684664208745::::::2008-03-04 16:36:50.958000:::1
Layer2JavaDeploymentDecisions:::Java:::This topic collects all asset-level decisions that are required if the component layer 2 in the SOA RA is implemented in Java.:::For the time being, this AD topic contains only very few decisions, even if there is a lot to say. As J2EE has been around for a while, there are many excellent documents you can study:  1. "Core J2EE patterns" by D. Alur et al.  2. IBMers and IBM clients can study the architectural decisions in the ARC 100 document of the IBM J2EE Reference Architecture.  3. More recommendations are of of scope of this sample.:::N151262597-2145981157:::N151262684664208747::::::2008-03-04 16:37:20.911000:::1
Layer4BpelModelingDecisions:::Bpel:::Several challenging architectural decisions have to be taken during BPEL modeling; it is not enough to define the control and data flow of an executable process.:::If the decision enforcement is partially automated and supported by a decision weaving framework, the decision outcomes can serve as input for downstream model transformations.:::N151262597-2130276959:::N151262684664208745::::::2008-03-04 16:37:19.989000:::1
EnterpriseApplicationArchitectureDecisions:::Ead:::The decisions in this introductory topic group shape the overall structure of the system under construction. They have to be taken once per (sub-)process in an analysis/initial design model, or even globally per project, program, or enterprise (see scope attribute of each decision). To organize the conceptual level further, SOAD defines additional topics for the layers introduced by SOMA, http://www.ibm.com/developerworks/library/ws-soa-design1/, and the SOA Solution Stack. Layer 2 is the service component layer; layer 3 the service layer; layer 4 the business process layer; layer 6 is the integration layer. Depending on the alternatives chosen in this introductory topic group, different decisions have to be made, e.g., to refine layers 2, 3, and 4. These follow on decisions appear in layer-specific topics, which are siblings of this introductory topic.:::The introduction of this topic is inspired by Chapter 8, "Putting it All Together" in "Patterns of Enterprise Application Architecture" by Martin Fowler. It is a key element of the SOAD approach - making one top-level conceptual decision per architectural layer provides the desired flexibility and platform independence. Active decision space management can then push the required follow on decisions to the decision maker, e.g., process and service realization decisions if SOA has been decided as the primary architectural integration style.:::N151262597-1902640931:::N151262684664208150::::::2008-03-04 16:37:08.122000:::1
ConceptualLevel::::::In SOA Decision Modeling (SOAD), the Conceptual Level is a truly Platform-Independent Decision Model. Lower SOAD levels such as the Technology and the Vendor Asset Level refine the decisions from this level into concrete technology and then vendor asset choices. Decisions related to the selection and adoption of conceptual patterns such as Broker and Workflow reside on this level. You might be missing more concrete decisions, e.g. regarding concrete BPEL workflow/process design or other WS-* integration technologies such as SOAP and WSDL? Such decisions appear on the Technology level.::::::N151262684664208150:::isroot::::::2008-03-04 16:37:39.017000:::1
EnterpriseApplicationDesignDecisions:::Eadt:::This topic captures technology-level decisions that can not be assigned to a single architectural layer, for example overall technology directions shaping a particular layer such as Layer 3 (service) or Layer 4 (process). Depending on the outcome of such project- or even enterprise-wide decisions, different groups of follow-on decisions become eligible. In SOAD, such groups are captured as architectural layer-specific topics on the Technology Level. For example, the Layer 3 decisions differ depending on the integration technology chosen, WS-* vs. REST.:::A.k.a. decisions related to logical component modeling, specified level/second elaboration point.:::N151262684771320013:::N151262684664208745::::::2008-03-04 16:37:54.399000:::1
TechnologyLevel::::::Decisions on the Technology Level refine the conceptual patterns, but are still free of vendor-specific concerns. Design patterns such as "Jore J2EE Patterns" by D. Alur et al typically have their place here, whereas architectural patterns tend to reside on the Conceptual Level.     Example: we discuss BPEL and ESB here, in refinement of the service composition and message exchange discussion from the previous Conceptual Level, but do not discuss IBM WebSphere ESB or Process Server specifics yet.::::::N151262684664208745:::isroot::::::2008-03-04 16:37:39.057000:::1
Layer4BpelDeploymentDecisions:::Bpela:::The decisions in this topic deal with BPEL asset selection and configuration.:::Not fully captured and modeled in this sample version of the SOAD content.:::N151262684771320047:::N151262684664208747::::::2008-03-04 16:37:58.705000:::1
VendorAssetLevel::::::The Vendor Asset Level contains two types of decisions: 1) asset selections (open source or commercial products, reusable assets on top of them available in CoPs) and 2) asset configuration/deployment decisions (vendor specific extensions of conceptual patterns and technology standards, runtime optimizations e.g. through advancd operational modeling).::::::N151262684664208747:::isroot::::::2008-03-04 16:37:39.087000:::1
MessageDesignDecisions:::Msg:::This topic captures decisions that deals with a single message exchange (for example originating from an atomic task in the analysis-level BPM). So all decisions in this topic have scope "(service) operation", while the decisions in other service realization subtopics mostly are scoped "service".:::The topic covers both functional/structural and non-functional/behavioral design aspects. For the time being, it only includes several basic examples. In future versions of SOAD, other service modeling issues can be included here.:::N151262597-2145981360:::N151262597-2145983605::::::2008-03-04 16:37:29.353000:::1
Layer3ServiceRealizationDecisions::::::This topic group collects platform-independent Layer 3 decisions, to be taken in service (operation) scope. These decisions are SOA-specific, but abstract away from Web services specifics (to be addressed on the platform-specific technology level). SOA patterns can be expected to appear as architecture alternatives on this level. A pure Java service realization strategy (not SOA) would lead to a different subtopic tree structure fotr layer 3 (less emphasis on loose coupling and interface design issues). Naturally, there are many dependencies to corresponding platform-specific decisions on the Technology Level.:::The decisions in this topic can be viewed as direct counterparts and companions to the abstract port type/interface element of a WSDL contract; the technology level then deals with bindings, the vendor asset level with the service/port element.:::N151262597-2145983605:::N151262684664208150::::::2008-03-04 16:37:29.984000:::1
