N15126268487705725:::1:::Service Composition Layer (SCL) and workflow pattern (Layer 4):::A project should implement a SCL if the integration needs involve human interactions (escalations, staff substitution, and notifications) or if the creation of composite applications with coordination between applications involves complex process flows.:::Overhead for engine management, additional skill requirements:::Executable workflows runnning in an engine (homegrown or commercial engine). Utilize a Service Composition Layer. In this approach, the implementation of all logic that utilizes the operations on multiple service components is done in a business process that is also exposed as a service, but separated from the other operations on the service. In other words, core business processes that cross service components are modeled, implemented, and deployed as their own services. They are not included in a service component, even though it may be logical to be associated with one.:::An OOPSLA 2004 practitioner report by Olaf Zimmermann et al presents such a composition architecture.:::http://soadecisions.org/art.htm <br>:::N151262567-51103476::::::2008-03-04 16:35:35.539000:::1N15126268487705728:::2:::Programming language component model (Layer 2):::Mature:::Not leveraging SOA benefits:::Component-based development paradigm (several technology choices):::Most pre-SOA references, e.g. object-oriented projects:::Component-based development literature:::N151262567-51103476::::::2008-03-04 16:35:35.649000:::1N15126268487705731:::3:::Portal or mashup (Layer 5):::Flexible, usable if designed well.:::All disadvantages of enterprise-wide initiatives, camp fights etc.:::Presentation layer aggregration:::Many Web applications:::Literature about portal technology and mashups:::N151262567-51103476::::::2008-03-04 16:35:35.749000:::1N2130706433-523346803:::4:::Integration layer (Layer 6):::This is a value add area for an ESB and its service mapping capabilities.:::Introduces dependencies between services. Requires a clear view of service mapping and relationships at build and deployment time to avoid broken links.:::An ESB can also serve as a service composition engine. Allow services to reference other services. Service operations can make direct calls to required services but only via published WSDL interfaces (via the ESB).:::Many classical EAI solutions:::ESB literature:::N151262567-51103476::::::2008-03-04 16:35:35.860000:::1N15126268487705734:::5:::None (human user invoking atomic business functions):::Maximum control and flexibility:::Development and maintenance effort, hard to meet regulatory compliance requirements (e.g, process integrity):::Custom code, database, end user:::Numerous application ecosystems that have been built in an uncoordinated manner, or have grown/proliferated over time:::Many different sources of information:::N151262567-51103476::::::2008-03-04 16:35:35.970000:::1N192143370-2117884289:::6:::Not applicable::::::::::::::::::N151262567-51103476:::AWB user:::2008-03-04 16:39:09.146000:::1N15126268487705761:::1:::BPEL:::Standards-based, so tool supported and, in principle, portable:::Rather steep learning curve, graphical programming not mainstream:::Business Process Execution Language:::Many process enabled SOAs are based on BPEL nowadays, see OOPSLA 2005 practitioner report available at http://soadecisions.org/art.htm:::http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=wsbpel:::N151262597-2145983614::::::2008-03-04 16:37:30.104000:::1N15126268487705764:::2:::Business State Machine (BSM):::More intuitive representation for certain document-centric process types:::Proprietary technology:::WebSphere Integration Developer-specific, object- rather than process-centric option:::Few:::WebSphere Integration Developer Info Center <br>:::N151262597-2145983614::::::2008-03-04 16:37:30.214000:::1N15126268487705767:::3:::Other workflow language, middleware or software package (e.g. FDL, jOpera, SAP):::Typically, vendor-specific languages can make use of vendor-specific runtime features:::Proprietary languages cannot be used by other engines. Proprietary languages have proprietary development tooling. Proprietary languages lacks support for standardized forms of compensation, event handling, and fault Handling.:::Many other workflow languages exist, most of them are proprietary, some backed by standards organizations. One example is to use the Flow Definition Language (FDL) as the process choreography standard. FDL is the proprietary language for IBM WebSphere Message Queue Workflow (WMQWF).:::Many existing workflow references:::Product information <br>:::N151262597-2145983614::::::2008-03-04 16:37:30.324000:::1N15126268487705770:::4:::Business rules engine such as ILOG Rules:::Mature, typically same as Level 3 choice, so less education efforts:::Does not exploit workflow pattern:::Custom code, e.g. SCA components or Java EJBs:::Many:::Component-Based Development (CBD) literature <br>:::N151262597-2145983614::::::2008-03-04 16:37:30.434000:::1N15126268487705773:::5:::Custom code (Java or other OO language, 3GL, 4GL):::Can be more flexible if central control is an illusion:::Does not exploit benefits of workflow pattern:::Decentralized (use case centric design, no central process control):::Many:::http://www-128.ibm.com/developerworks/webservices <br>:::N151262597-2145983614::::::2008-03-04 16:37:30.545000:::1N192143370-1764403544:::6:::None::::::::::::::::::N151262597-2145983614::::::2008-03-04 16:37:30.655000:::1N192143370-1630299513:::7:::Not applicable::::::::::::::::::N151262597-2145983614:::AWB user:::2008-03-04 16:39:23.777000:::1N192143370-2013039759:::1:::IBM WebSphere Process Server::::::::::::::::::N151262684771320106::::::2008-03-04 16:38:11.584000:::1N192143370-1339371450:::2:::Oracle BPEL Process Manager::::::::::::::::::N151262684771320106::::::2008-03-04 16:38:11.694000:::1N192143370-2075148832:::3:::ActiveBPEL::::::::::::::::::N151262684771320106::::::2008-03-04 16:38:11.804000:::1N192143370-1656149577:::4:::Many more assets::::::::::::::::::N151262684771320106::::::2008-03-04 16:38:11.914000:::1N192143370-1081950426:::5:::Not applicable::::::::::::::::::N151262684771320106:::AWB user:::2008-03-04 16:39:28.965000:::1N15126268487705827:::1:::DTP Transaction Islands (default):::Transaction Islands is often seens as the only alternative that is faithful to the SOA vision of loosely coupling consumer and provider. This alternative decouples the service composition layer from the invoked services (from a system transaction management point of view). The transactions therefore are rather fine grained and often short running (see related decision Prd-04, dealing with the PAT primitive, for a discussion of the size and duration of the SCL transactions).:::Consequences: If a service operation has to be rolled back, the transaction in which the process navigation in the SCL runs is not affected. If a service works with shared enterprise resources, the service operations must be idempotent, as they may be executed more than once due to the transactional process navigation in the SCL. In many cases, the service provider must offer a compensation operation, and higher-level coordination is required (e.g., via business transactions).:::This pattern isolates process activities in the Service Composition Layer (SCL) from service operation execution (from a system transaction management standpoint). It consists of the following settings for the decision primitives (see related decisions): PAT-J or PAT-N, CT-SNT, ST-N.:::In practice, this pattern is often selected as a default choice.:::The paper "Architectural decisions and patterns for transactional business process in SOA" has detailed explanations. It can be found here: http://soadecisions.org/download/ICSOC2007_4749_0081_0093.pdf:::N1512625671484608885::::::2008-03-04 16:35:36.511000:::1N15126268487705830:::2:::DTP Transaction Bridge:::This pattern covers resource protection needs well on the system level.:::Process activity and invoked service operation execute in the same transaction. Several service operations can participate in the same transaction. Therefore, there is a natural limit for the response times (tens of seconds to seconds at most). If a service operation has to be rolled back, e.g., due to a service-internal processing error, previous transactional work, which can include process navigation in the SCL and the invocation of other services, has to be rolled back as well.:::Via context sharing, this pattern couples process activity execution in the service composition layer and service operation execution from a transaction management perspective. Transaction Bridge consists of the following primitives: PAT-J or PAT-N, CWT-ST, ST-J. See related decisions for detailed information regarding these primitives.:::This pattern often is not applicable, e.g., when processes and operations are long running or communicate over a slow or unreliable Wide Area Network (WAN). However, in certain short-running micro flow scenarios, on subprocess level, it can be the most straightfoward way to meet the resource protection needs.:::The paper "Architectural decisions and patterns for transactional business process in SOA" has more detailed explanations.:::N1512625671484608885::::::2008-03-04 16:35:36.621000:::1N15126268487705833:::3:::QTP Stratified Stilts:::Process activities are loosely coupled with the services, distributing work asynchronously. Services are not forced to respond in a timely fashion; message delivery is guaranteed by the messaging infrastructure. This pattern is well suited in long running process integration scenarios that have to use unreliable networks or slow  or unreliable service providers.:::However, if the service operation execution fails, the process may not get an immediate response; additional error handling is required, often using timeout and compensation logic. Significant testing and systems management efforts are required.:::Use message queuing as SOA communication infrastructure to realize Queued Transaction Processing (QTP) in SOA. The SCL transaction is suspended during service invocation. Stratified Stilts consists of the following primitives: PAT-J or PAT-N, CWT-AS, ST-J. See related decisions for detailed information regarding these primitives.:::Most message-based workflow solutions. This pattern often is the only choice in process-enabled SOA, e.g., when integrating legacy systems.:::Stratification is explained in depth in "Production Workflow" by F. Leymann and D. Roller. The paper "Architectural decisions and patterns for transactional business process in SOA" gives an overview. <br>:::N1512625671484608885::::::2008-03-04 16:35:36.731000:::1N192143370-1373507676:::4:::Not applicable::::::::::::::::::N1512625671484608885:::AWB user:::2008-03-04 16:39:09.246000:::1N15126268487705962:::1:::PAT-Join (J):::Reduces number of transactions, couples activities in the process layer transactionally.:::Increases execution time of the joined transactions. As a consequence, the process activity's work might get rolled back if any other process activity or service operation that participates in the same transaction fails.:::With PAT-J, a process activity executes in the same transaction context as the adjacent activities in the same process; it joins an existing context.:::This conceptual setting corresponds to a vendor asset level setting for WebSphere Process Server projects which is recommended by SWG consultants e.g. at the WebSphere Technical Exchange (WTE) conference. Note that this setting is not the same as the default in WebSphere Integration Developer.:::The paper "Architectural decisions and patterns for transactional business process in SOA" has detailed explanations. <br>:::N151262597-2145981284::::::2008-03-04 16:37:26.869000:::1N15126268487705965:::2:::PAT-New (N):::Decouples the process activity from its peers. Shortens transaction execution time, improves data currency.:::Increases the number of transactions and therefore the overhead for their execution.:::With PAT-N, a process activity is executed in a new transaction context.:::Not the default recommendation, but often used in practice to meet certain resource protection needs.:::The paper "Architectural decisions and patterns for transactional business process in SOA" has detailed explanations. <br>:::N151262597-2145981284::::::2008-03-04 16:37:26.979000:::1N192143370-1133047421:::3:::Not applicable::::::::::::::::::N151262597-2145981284:::AWB user:::2008-03-04 16:39:23.307000:::1N15126268487705932:::1:::CT-Synchronous Non-Transactional (SNT) (default):::Decouples service consumer and provider.:::As a consequence, the activity waits until the call to the service returns. Once the service has been called, there is no possibility to influence the work the service conducts. For example, the CT-SNT service invocation may cause the maximum duration of the transaction configured in the SCL to be exceeded, which may result in a transaction timeout and a subsequent rollback. With CT-SNT, undoing the work of the service can not be included in this rollback.:::Synchronous Non-Transactional (SNT) represents a synchronous service invocation from the process activity without propagation of the transaction context.:::Transaction Islands pattern. On the technology level, CT-SNT as a synchronous call not propagating the transactional context maps to plain SOAP/HTTP or non-transactional IIOP as transport protocol.:::The paper "Architectural decisions and patterns for transactional business process in SOA" has detailed explanations. It can be found here: http://soadecisions.org/download/ICSOC2007_4749_0081_0093.pdf <br>:::N151262597-2145983575::::::2008-03-04 16:37:29.473000:::1N15126268487705935:::2:::CT-Synchronous Transactional (ST):::Couples service provider and consumer.:::As a consequence, the process activity waits until the call to the service returns; a rollback might occur even after the service execution has completed (but not been committed yet).:::CT-ST models a synchronous service invocation with transactional context propagation (cross-layer DTP).:::Transaction Bridge pattern. On the technology level, CT-ST maps to SOAP/HTTP with WS-AtomicTransaction support or to IIOP.:::The paper "Architectural decisions and patterns for transactional business process in SOA" has detailed explanations.:::N151262597-2145983575::::::2008-03-04 16:37:29.583000:::1N15126268487705938:::3:::CT-Asynchronous Stratified (AS):::In CT-AS, long-running services can be invoked without loosing transactional behavior, as the process navigation is part of a stratified transaction.:::At least three transactions are involved in the invocation of a long-running service: the request message is sent in a first transaction; in a second transaction, the message is received by the service provider and the response message is sent; the process activity receives the response from the service in a third transaction.:::CT-AS represents an asynchronous QTP-style service invocation without transaction context propagation. We assume that invoke activity execution and request message emission occur in the same transaction.:::Stratified Stilts pattern. On the technology level, CT-AS can be implemented with JMS providers; no standardized WSDL binding exists.:::The paper "Architectural decisions and patterns for transactional business process in SOA" has detailed explanations.:::N151262597-2145983575::::::2008-03-04 16:37:29.693000:::1N192143370-1475632018:::4:::Not applicable::::::::::::::::::N151262597-2145983575:::AWB user:::2008-03-04 16:39:23.677000:::1N15126268487705899:::1:::ST-New (N):::Transactional isolation, more, but smaller grained transactions.:::As a consequence, if a layer 4 process activity is rolled back and retried later (this is engine-specific behavior), the service may operate on modified enterprise resources.:::In ST-N, the service provider does not participate in the incoming transaction; it creates a new transaction context.:::ST-N is used in the Transaction Islands pattern.:::The paper "Architectural decisions and patterns for transactional business process in SOA" from ICSOC 2007 has detailed explanations: http://soadecisions.org/art.htm <br>:::N151262567-1760776756::::::2008-03-04 16:35:30.682000:::1N15126268487705902:::2:::ST-Join (J):::Transactional coupling: less, but coarser grained transactions.:::As a consequence, the process activity and the service influence each other's execution, e.g., when causing a rollback. Such tight coupling is often viewed as a violation of the core SOA principles.:::In ST-J, the service provider participates in the transaction of the caller (if a transaction exists).:::ST-J is used in the Transaction Bridge pattern.:::The paper "Architectural decisions and patterns for transactional business process in SOA" has detailed explanations. <br>:::N151262567-1760776756::::::2008-03-04 16:35:30.782000:::1N192143370-1439462879:::3:::Not applicable::::::::::::::::::N151262567-1760776756:::AWB user:::2008-03-04 16:39:08.475000:::1N192143370-1978176055:::1:::Participates::::::::::::::::::N151262684771320109::::::2008-03-04 16:38:12.585000:::1N192143370-1843582675:::2:::RequiresOwn::::::::::::::::::N151262684771320109::::::2008-03-04 16:38:12.695000:::1N192143370-2126121343:::3:::CommitBefore::::::::::::::::::N151262684771320109::::::2008-03-04 16:38:12.805000:::1N192143370-1601723873:::4:::CommitAfter::::::::::::::::::N151262684771320109::::::2008-03-04 16:38:12.915000:::1N192143370-1158714050:::5:::Not applicable::::::::::::::::::N151262684771320109:::AWB user:::2008-03-04 16:39:29.065000:::1N192143370-1418947079:::1:::Non-transactional Web service invocation (default)::::::::::::::::::N151262684771320143::::::2008-03-04 16:38:19.275000:::1N192143370-1296022554:::2:::WSAT only::::::::::::::::::N151262684771320143::::::2008-03-04 16:38:19.385000:::1N192143370-1722017394:::3:::WBAF only::::::::::::::::::N151262684771320143::::::2008-03-04 16:38:19.495000:::1N192143370-1265171477:::4:::Use both WBAF and WSAT::::::::::::::::::N151262684771320143::::::2008-03-04 16:38:19.605000:::1N192143370-1050775679:::5:::Not applicable::::::::::::::::::N151262684771320143:::AWB user:::2008-03-04 16:39:29.936000:::1N192143370-1558099002:::1:::suspendTx=true, asynchInv=n/a::::::::::::::::::N151262684771319918::::::2008-03-04 16:37:50.203000:::1N192143370-1449045219:::2:::suspendTx=false, asynchInv=n/a::::::::::::::::::N151262684771319918::::::2008-03-04 16:37:50.313000:::1N192143370-1032558846:::3:::suspendTx=false, asynchInv=commit::::::::::::::::::N151262684771319918::::::2008-03-04 16:37:50.423000:::1N192143370-1472265852:::4:::Not applicable::::::::::::::::::N151262684771319918:::AWB user:::2008-03-04 16:39:26.271000:::1N192143370-1974972017:::1:::joinTx=false::::::::::::::::::N151262684850893769::::::2008-03-04 16:38:26.916000:::1N192143370-1523496959:::2:::jointTx=true::::::::::::::::::N151262684850893769::::::2008-03-04 16:38:27.026000:::1N192143370-1672515529:::3:::jointTx=n/a::::::::::::::::::N151262684850893769::::::2008-03-04 16:38:27.146000:::1N192143370-1447406241:::4:::Not applicable::::::::::::::::::N151262684850893769:::AWB user:::2008-03-04 16:39:30.998000:::1N192143370-1297408580:::1:::joinTx=false::::::::::::::::::N151262684771319915::::::2008-03-04 16:37:49.502000:::1N192143370-1413149107:::2:::jointTx=true::::::::::::::::::N151262684771319915::::::2008-03-04 16:37:49.612000:::1N192143370-1766552351:::3:::jointTx=n/a::::::::::::::::::N151262684771319915::::::2008-03-04 16:37:49.722000:::1N192143370-1324184595:::4:::Not applicable::::::::::::::::::N151262684771319915:::AWB user:::2008-03-04 16:39:26.171000:::1N192143370-2095195692:::1:::Transaction=global::::::::::::::::::N151262684850893772::::::2008-03-04 16:38:27.627000:::1N192143370-1709572935:::2:::Transaction=local::::::::::::::::::N151262684850893772::::::2008-03-04 16:38:27.737000:::1N192143370-1674323906:::3:::Transaction=any::::::::::::::::::N151262684850893772::::::2008-03-04 16:38:27.847000:::1N192143370-1814136747:::4:::Not applicable::::::::::::::::::N151262684850893772:::AWB user:::2008-03-04 16:39:31.088000:::1N192143370-1239525169:::1:::NotSupported::::::::::::::::::N151262684771320112::::::2008-03-04 16:38:13.316000:::1N192143370-1701536656:::2:::Supports::::::::::::::::::N151262684771320112::::::2008-03-04 16:38:13.426000:::1N192143370-1572211460:::3:::Required::::::::::::::::::N151262684771320112::::::2008-03-04 16:38:13.526000:::1N192143370-1155844049:::4:::RequiresNew::::::::::::::::::N151262684771320112::::::2008-03-04 16:38:13.637000:::1N192143370-1695845246:::5:::Mandatory::::::::::::::::::N151262684771320112::::::2008-03-04 16:38:13.757000:::1N192143370-1149616033:::6:::Never::::::::::::::::::N151262684771320112::::::2008-03-04 16:38:13.867000:::1N192143370-1931197527:::7:::Not applicable::::::::::::::::::N151262684771320112:::AWB user:::2008-03-04 16:39:29.165000:::1N15126268487705788:::1:::System transactions, 1PC or 2PC:::See discussion in M. Fowler "Patterns of Enterprise Application Architecture":::See discussion in M. Fowler "Patterns of Enterprise Application Architecture":::See discussion in M. Fowler "Patterns of Enterprise Application Architecture":::RDBMS and transaction monitors such as CICS:::Standard transaction processing and RDBMS literature:::N151262567839123127::::::2008-03-04 16:35:40.286000:::1N15126268487705791:::2:::Business transactions, engine supported compensation or custom code:::See discussion in M. Fowler "Patterns of Enterprise Application Architecture":::See discussion in M. Fowler "Patterns of Enterprise Application Architecture":::See discussion in M. Fowler "Patterns of Enterprise Application Architecture":::Most, if not all enterprise applications, require some form of business transaction management in addition to system transactions. BPEL engine compensation is an example of a middleware technology chiming in certain capabilities that make it easier to implement the compensating logic.:::The term business transaciton is used by M. Fowler in "Patterns of Enterprise Application Architecture" <br>:::N151262567839123127::::::2008-03-04 16:35:40.396000:::1N15126268487705794:::3:::Manual compensation, end user or systems management personnel:::Full control:::Development and compliance management effort:::Command line compensation tool, SQL query sent by operator:::Last resort in most, if not all enterprise applications:::See "Production Workflow" by F. Leymann and D. Roller <br>:::N151262567839123127::::::2008-03-04 16:35:40.506000:::1N15126268487705797:::4:::Combination of all of the above (default)::::::::::::::::::N151262567839123127::::::2008-03-04 16:35:40.606000:::1N192143370-1018245846:::5:::Not applicable::::::::::::::::::N151262567839123127:::AWB user:::2008-03-04 16:39:09.627000:::1N192143370-1691388548:::1:::Service composition (process) layer (default)::::::::::::::::::N151262684771320097::::::2008-03-04 16:38:09.110000:::1N192143370-1820069454:::2:::External coordinator::::::::::::::::::N151262684771320097::::::2008-03-04 16:38:09.220000:::1N192143370-1704889508:::3:::None::::::::::::::::::N151262684771320097::::::2008-03-04 16:38:09.330000:::1N192143370-1666423661:::4:::Not applicable::::::::::::::::::N151262684771320097:::AWB user:::2008-03-04 16:39:28.674000:::1N151262587-4203139:::4:::Operating System (OS):::Use this approach to handle simple hardware failures or middleware failures that do not impact applications (e.g.: thread failure invoking automatic restart of the thread on another processor).:::Not application specific:::Limit compensation to capabilities provided by the operating systems and middleware resource managers to compensate for component failure.:::Many:::Operating system literature <br>:::N151262684771320100::::::2008-03-04 16:36:17.259000:::1N151262587-4203142:::3:::Integration middleware (ESB):::This provides the flexibility to roll back based on outcomes within the ESB processing logic.:::Coupling issues between layers 4 and 6. Mediation developers must have application know how.:::Implement compensation as part of Process Choreography/Workflow.:::Many:::SOA literature, "Production Workflow" by F. Leymann and D. Roller <br>:::N151262684771320100::::::2008-03-04 16:36:17.309000:::1N151262587-4203145:::2:::Custom application code:::Use this approach when there is no ESB, or when the compensations are minimal in number and complexity and remain static.:::Development and maintenance effort:::Hand-code compensation within applications (inside SCL or inside atomic Layer 2 service component).:::Many:::"Production Workflow" by F. Leymann and D. Roller:::N151262684771320100::::::2008-03-04 16:36:17.349000:::1N151262587-4203148:::1:::Compensation service:::This approach works well if an external process choreography engine (external to the bus) is utilized to handle business process choreography.:::More services have to be deployed, nanaged, and maintained.:::Implement compensation logic as a SOAP/WSDL service. Such a compensating service can become part of an ESB mediation or a BPEL compensation.:::Many:::Have a look at the developerWorks articles by A. Robeller, e.g. "Using compensation in business processes with Business Process Choreographer" and "Microflow Compensation in Business Process Choreographer".:::N151262684771320100::::::2008-03-04 16:36:17.389000:::1N192143370-1423581185:::5:::Combination of several or all of the other alternatives::::::::::::::::::N151262684771320100::::::2008-03-04 16:38:10.312000:::1N192143370-1522977278:::6:::Not applicable::::::::::::::::::N151262684771320100:::AWB user:::2008-03-04 16:39:28.775000:::1N192143370-1131689533:::1:::BPEL compensation, e.g. scopes, fault and event handlers::::::::::::::::::N151262684771320103::::::2008-03-04 16:38:10.702000:::1N192143370-1492088878:::2:::Platform-specific (e.g. technical compensation in WPS)::::::::::::::::::N151262684771320103::::::2008-03-04 16:38:10.802000:::1N192143370-1169789636:::3:::Custom::::::::::::::::::N151262684771320103::::::2008-03-04 16:38:10.913000:::1N192143370-1701040294:::4:::Not applicable::::::::::::::::::N151262684771320103:::AWB user:::2008-03-04 16:39:28.875000:::1N213070643319586394:::1:::Request-reply, synchronous (default):::State of the art and the practice, even of many resources say that messaging always is the right choice. Use if an immediate response to the service request is needed by the requestor or the functionality of the requestor depends on the outcome of the service implementation.:::Timeouts possible, delivery not guaranteed:::Synchronous request-reply, consumer blocks until provider has processed request and SOA infrastructure has communicated response back. Using this pattern, the service requestor sends a request synchronously to the service provider and the service provider performs the requested service and returns the response in the same synchronous interaction.:::Most Web services production references:::"Enterprise Integration Patterns" by G. Hohpe and B. Woolf:::N151262597-2145981139::::::2008-03-04 16:37:20.110000:::1N213070643319586397:::2:::One way, asynchronous (either true fire-and-forget or response polling on separate channel):::Truly asychronous. Use if an immediate response is not needed for the service by the requestor.  It is only important that the service request is received by the service provider and the service is performed.:::Consumer has to poll provider, or become a provider itself to get acknowledgement.:::Using this pattern, the service requestor sends a request without expecting the response for the request from the receiver. The request is sent to a single receiver.:::True one way is used in monitoring/event processing scenarions; application-level request-response over two transport level one-way channels is a common variation.:::"Enterprise Integration Patterns" by G. Hohpe and B. Woolf:::N151262597-2145981139::::::2008-03-04 16:37:20.220000:::1N213070643319586400:::3:::Platform-specific integration patterns, e.g. pub/sub variations on ESB:::In publish/subscribe, the binding among the service requestors and providers is dynamic and is dependent on the business context. The context can be specified by the particulars of the type of the request or the message.:::Systems management efforts often underestimated:::Service providers and consumers can participate in publish/subscribe setups. Using this pattern, the service provider subscribes to receive certain types of message requests and is forwarded all the requests from any of the service requestors that match the message type.:::Some non-Web services:::"Enterprise Integration Patterns" by G. Hohpe and B. Woolf.:::N151262597-2145981139::::::2008-03-04 16:37:20.330000:::1N1844835811938005663:::4:::Many more conversation patterns, see EAI literature:::Flexibility:::Typically not supported by engines and brokers in an interoperable way:::1) Fire and Forget Multiple Receivers: Using this pattern, the service requestor sends a request without expecting the response for the request from the receiver(s).  The request is sent to multiple receivers. 2) Fault Notification: Using this pattern, a service provides only fault notification to the service requestor(s). The notification is provided asynchronous to the originating service request. 3) Request with Acknowledgement: Using this pattern, a service requestor interacts with the service provider in sending the request for the service and receives an immediate acknowledgement that the service request was received. The service implementation is not executed before the response is sent. 4) Many to many communication, real broker. Use if an immediate response is not needed for the service by the requestor and it is only important that the service request is received by the service provide(s) and the service is performed. Multiple service implementations:::Many traditional EAI solutions, B2B marketplaces and auction scenarios:::Look for drafts of "Conversation Patterns" by G. Hohpe:::N151262597-2145981139::::::2008-03-04 16:37:20.440000:::1N192143370-1967725214:::5:::Not applicable::::::::::::::::::N151262597-2145981139:::AWB user:::2008-03-04 16:39:22.536000:::1N213070643319586415:::1:::Standard text format, e.g., XML (SOAP) and JavaScript Object Notation (JSON):::Human readable (presumably), tool supported:::More verbose than binary formats, security threats (confidentiality? integrity?):::This alternative is the conceptual-level "proxy" for the technology-level choice of a concrete textual format for message request and response information. Different integration technologies define different message exchange formats; architeztural patterns such as broker do not cover this issue.:::All true Web services solutions use SOAP, the standard message exchange format defined by the WS-* set of specifications.:::See technology-level refinement of this decision. <br>:::N151262597-1902640887::::::2008-03-04 16:37:05.839000:::1N213070643319586418:::2:::Custom XML or plain ASCII:::Flexibility and control:::Programming and maintenance effort, security threats:::a.k.a. DIY (Do It Yourself) or RYO (Roll Your Own):::Often done in older SOAs (pre-WS-* days), using plain MQ.:::No generic reference can be given here, as there are many such formats.:::N151262597-1902640887::::::2008-03-04 16:37:05.949000:::1N213070643319586421:::3:::Binary formats such as that used by RMI or other transfer syntaxes (remember ASN.1?):::Compact:::Must be (de)serialized:::Details depending on transport protocol in use.:::Often mandated by chosen transport protocol, uncommon for Web services (although proposals for binary XML encodings exist). IIOP used in CORBA is an example.:::The CORBA and EJB technology standards define such protocols (IIOP, RMI).:::N151262597-1902640887::::::2008-03-04 16:37:06.069000:::1N192143370-1581906032:::4:::Not applicable::::::::::::::::::N151262597-1902640887:::AWB user:::2008-03-04 16:39:20.523000:::1N151262480-1206558223:::2:::SOAP 1.2::::::::::::::::::N151262684850893740::::::2008-03-04 16:34:33.720000:::1N151262480-1206558226:::1:::SOAP 1.1:::W3C standard and WS-I Basic profile define how the SOAP envelopes have to look like to ensure interoperability. SOAP engines are available for many programmng languages. SOAP headers allow providing end-to-end QoS, as they are interpreted by the communications middleware (e..g, an ESB). In the past 7 years, SOAP has evolved to become more flexible in terms of the XML data to be transferred (document/literal) and also protocol agnostic (supporting different bindings of WSDL).:::Verbosity often criticized (a SOAP envelope tends to be 4 to 20 times bigger than its payload). The standard is perceived to be hard comprehend (by low end platform developers; application developers and integrators do not have to operate on the specification level). SOAP/HTTP is the only standardized transport binding.:::SOAP started in 1998 as a remote procedure call protocol that would go through firewalls (the Simple Object Access Protocol). Note that SOAP no longer stands for Simple Object Access Protocol, but for itself, as it is neither simple nor object-oriented nor a protocol. It doies provide access, though: The first version of SOAP defined an extensible message format based on XML (&lt;soap:Envelope&gt;, &lt;soap:Body&gt;, and a number of optional &lt;soap:Headers&gt;; a serialization mechanism to encode RPC parameters in XML (before XML Schema existed); a binding to an existing transport protocol that would go through the firewalls (HTTP).:::Many WS-* references running in production today.:::W3C, WS-I:::N151262684850893740::::::2008-03-04 16:34:33.770000:::1N192143370-1749812378:::3:::Other::::::::::::::::::N151262684850893740::::::2008-03-04 16:38:26.435000:::1N192143370-1263414381:::4:::Not applicable::::::::::::::::::N151262684850893740:::AWB user:::2008-03-04 16:39:30.898000:::1N15126268456085098:::1:::SOAP/HTTP (default):::Simple to develop, maintain and manage. HTTP is a widely adopted protocol. Any organization with a Web server has implemented HTTP, and any client that uses a Web browser uses HTTP. Therefore, the HTTP infrastructure is widely available and the HTTP protocol is open and deployed on many different system types, including non-traditional computing devices such as PDAs. Furthermore, most enterprises allow HTTP to travel freely through protocol firewalls. Therefore, there are fewer barriers to extended enterprise use of HTTP as a transport for Web services.:::Tight coupling between consumer and provider in time dimension, as HTTP is a synchronous protocol. The HTTP protocol is stateless. If any state data is required to maintain an application session, the applications must create and manage the state data. Also, HTTP is not a reliable protocol. If reliable delivery of application data is required, the application must either develop a reliability framework, such as exchanging receipt messages or use a more reliable protocol such as WS-RM.:::SOAP over Hypertext Transfer Protocol (HTTP). Note that SOAP is not an acronym, but stands for itself. The service requestor invokes the service by transmitting SOAP messages over the HTTP protocol.:::Many WS-* references exist:::http://www.w3.org/2002/ws/:::N151262597-2145981281::::::2008-03-04 16:37:25.908000:::1N15126268456085101:::2:::SOAP over reliable asynchronous transport, e.g. JMS or WS-RM:::Guaranteed delivery, decoupling in time dimension. JMS can be implemented within an J2EE compliant application server, possibly using a more reliable and robust infrastructure (e.g., MQ).  JMS provides a more reliable transport than alternatives such as HTTP.:::Interoperability not yet proven, the SOAP/JMS binding is not part of any WS-I profile. When utilizing JMS, the communicating Web services must have access to JMS providers that can communicate with each other. Generally, this implies that the same product must be installed (e.g.: both systems must have IBM WebSphere MQ installed). JMS is a Java-based standard and is not as readily accessible to systems that are not based on Java.:::Java Messaging Service (JMS) as SOAP transport or Web Services ReliableMessaging (WS-RM) on top of plain SOAP/HTTP. The service requestor uses the implementation based on the Java Messaging Service (JMS) standard to asynchronously transfer the request to the service provider using the SOAP messages. Similarly, the service provider responds to the requestor utilizing the same mechanism. A different mechanism can be chosen for the response.:::References exist, but not as many as for SOAP/HTTP:::Several articles on IBM developerWorks <br>:::N151262597-2145981281::::::2008-03-04 16:37:26.018000:::1N15126268456085104:::3:::Platform-specific bindings such as local Java, RMI/IIOP (via WSIF or SCA), native MQ over IP, JCA, various host protocols/adapters such as CTG:::Proprietary protocols and adapter often are performance optimized. Some applications and legacy application servers might have adopted the open standards philosophy and have included a Web services interface. The WSDL defines the interface to communicate directly with the application business logic. This approach often is more efficient and reliable than using intermediary adapters to access the application logic.:::No interoperability. If non-standard APIs are used to expose legacy systems their applicability within a flexible solution can be limited. Additional wrapper code may have to be written to expose those as standardized services.:::WSIF is the Web Services Invocation Framework. SCA is the Service Component Architecture. Using this mechanism either the service requestor or an intermediary such as an ESB invokes the Service Provider implementation using a proprietary protocol and API provided by the implementing application. The service is exposed as a Web service and the messages are formatted as such.<br> JCA or other adapter technologies can be utilized. The link from the JCA API to the enterprise system is called a resource adapter and can be provided by a third-party vendor.:::WSIF is used under the covers in IBM WBISF 5.1 and Oracle BPEL Process Manager:::WSIF is an Apache project, SCA now specified by OSOA and OASIS <br>:::N151262597-2145981281::::::2008-03-04 16:37:26.138000:::1N192143370-1753321374:::4:::Not applicable::::::::::::::::::N151262597-2145981281:::AWB user:::2008-03-04 16:39:23.207000:::1N213070643319586424:::1:::IBM SOAP engine inside WebSphere (default):::Vendor support, performance, IBM is a member of WS-I.:::SOAP support in WebSphere has a changed from version to version.:::SOAP engine built into WebSphere.:::Many:::WebSphere Info Center:::N151262597-2145981206::::::2008-03-04 16:37:23.855000:::1N213070643319586430:::2:::Axis 1.2 or 1.3:::Large user base.:::Usual open source risks, maintenance risk: Apache has rewritten its SOAP support a third time in the Axis2 project.:::The first Axis implementation, which become available in 2003 and matured in the following years.:::Many:::http://ws.apache.org/:::N151262597-2145981206::::::2008-03-04 16:37:23.975000:::1N213070643319586427:::3:::Axis2:::Support for many WS-* standards, active and diverse developer community.:::API and architecture differ from those in previous versions; JAX-WS/JAX-B and JAX-RPC compliance can be an issue.:::Latest codebase from Apache foundation.:::Many:::http://ws.apache.org/:::N151262597-2145981206::::::2008-03-04 16:37:24.085000:::1N213070643319586433:::4:::Other open source asset, e.g. Xfire from Codehaus.org:::Differs per selected option.:::Differs per selected option.:::Many other options exist, including DIY/RYO (which is not recommended).:::Differs per selected option.:::Differs per selected option.:::N151262597-2145981206::::::2008-03-04 16:37:24.195000:::1N192143370-1846942761:::5:::Custom implementation of the SOAP message format::::::::::::::::::N151262597-2145981206::::::2008-03-04 16:37:24.306000:::1N192143370-1730184076:::6:::Not applicable::::::::::::::::::N151262597-2145981206:::AWB user:::2008-03-04 16:39:23.006000:::1